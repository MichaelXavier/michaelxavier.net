if(!this.sh_languages){this.sh_languages={}}sh_languages.haskell=[[[/\b[+-]?(?:(?:0x[A-Fa-f0-9]+)|(?:0[oO][0-7]+)|(?:(?:[\d]*\.)?[\d]+(?:[eE][+-]?[\d]+)?))u?(?:(?:int(?:8|16|32|64))|L)?\b/g,"sh_number",-1],[/"/g,"sh_string",1],[/'(?:[^\\']{1}|\\[\\'0abfnrtv"&]|\\[\d]+|\\[oO][0-7]+|\\[xX][A-Fa-f0-9]+)'/g,"sh_string",-1],[/'[^\\']{2,}'/g,"sh_regex",-1],[/\b(?:as|case|class|data|deriving|do|else|hiding|if|import|in|infixl|infixr|instance|let|module|newtype|of|primitive|qualified|then|type|where|_)\b/g,"sh_keyword",-1],[/\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b/g,"sh_predef_func",-1],[/\b(?:False|True|Left|Right|Just|Nothing|EQ|LT|GT)\b/g,"sh_predef_var",-1],[/\b(?:Bounded|Enum|Eq|Floating|Fractional|Functor|Integral|Ix|Monad|Num|Ord|Read|Real|RealFloat|RealFrac|Show)\b/g,"sh_classname",-1],[/\{-#/g,"sh_preproc",2],[/\{-/g,"sh_comment",3],[/(?:::|=>|\->|<\-|\.\.)(?!::[^\-!#\$%&amp;\*\+\/&lt;=&gt;\?&#92;@\^\|~\.:])|∷|⇒|→|←|∀|∃/g,"sh_specialchar",-1],[/(?:[!#$$%*+\.\/<=>\?@\\\^\|\-~:]+)--/g,"sh_symbol",-1],[/(?:--)(?![!#$$%*+\.\/<=>\?@\\\^\|\-~:]+)/g,"sh_comment",4],[/\b(?:Bool|Char|Double|Either|FilePath|Float|Int|Integer|IO|IOError|Maybe|Ordering|Ratio|Rational|ReadS|ShowS|String|ByteString)\b/g,"sh_type",-1],[/\b(?:[A-Z][\w']*)\b(?![\.])/g,"sh_usertype",-1],[/!|#|\$|%|&|\*|\+|\.|\/|<|=|>|\?|@|\\|\^|\||-|~|:/g,"sh_symbol",-1],[/\{|\}/g,"sh_cbracket",-1]],[[/\\(?:\\|")/g,null,-1],[/"/g,"sh_string",-2]],[[/#-\}/g,"sh_preproc",-2]],[[/-\}/g,"sh_comment",-2],[/\{-/g,"sh_comment",3]],[[/$/g,null,-2]]];